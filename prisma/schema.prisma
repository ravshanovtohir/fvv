// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  first_name       String?
  last_name        String?
  middle_name      String?
  phone_number     String
  password         String
  fcm_token        String?
  notifications    NotificationUser[]
  userTestSessions UserTestSession[]

  @@map("user")
}

model Staff {
  id        Int    @id @default(autoincrement())
  full_name String
  login     String
  password  String

  created_at DateTime  @default(now())
  updated_at DateTime?

  @@map("staff")
}

model Encyclopedia {
  id             Int      @id @default(autoincrement())
  title_uz       String
  title_ru       String
  title_en       String
  description_uz String
  description_ru String
  description_en String
  category_id    Int
  image          String?
  category       Category @relation(fields: [category_id], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime?

  @@map("encyclopedia")
}

model Dictionary {
  id             Int      @id @default(autoincrement())
  prefix         String
  title_uz       String
  title_ru       String
  title_en       String
  description_uz String
  description_ru String
  description_en String
  category_id    Int
  category       Category @relation(fields: [category_id], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime?

  @@index([prefix])
  @@map("dictionary")
}

model FirstAid {
  id             Int     @id @default(autoincrement())
  title_uz       String
  title_ru       String
  title_en       String
  description_uz String
  description_ru String
  description_en String
  image          String?

  category_id Int
  category    Category @relation(fields: [category_id], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime?

  @@map("first_aid")
}

model Category {
  id               Int               @id @default(autoincrement())
  type             Int?
  title_uz         String
  title_ru         String
  title_en         String
  icon             String
  Encyclopedia     Encyclopedia[]
  Dictionary       Dictionary[]
  FirstAid         FirstAid[]
  Test             Test[]
  userTestSessions UserTestSession[]

  created_at DateTime  @default(now())
  updated_at DateTime?

  @@map("category")
}

model Test {
  id              Int              @id @default(autoincrement())
  question_uz     String
  question_ru     String
  question_en     String
  answers_uz      Json
  answers_ru      Json
  answers_en      Json
  true_answer     String
  userTestAnswers UserTestAnswer[]

  category_id Int
  category    Category @relation(fields: [category_id], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime?

  @@map("test")
}

model About {
  id           Int       @id @default(autoincrement())
  name_uz      String?
  name_ru      String?
  name_en      String?
  title_uz     String?
  title_ru     String?
  title_en     String?
  image        String?
  phone_number String?
  email        String?
  address_uz   String?
  address_ru   String?
  address_en   String?
  created_at   DateTime  @default(now())
  updated_at   DateTime?

  @@map("about")
}

model Contact {
  id           Int     @id @default(autoincrement())
  title_uz     String?
  title_ru     String?
  title_en     String?
  phone_number String?

  created_at DateTime  @default(now())
  updated_at DateTime?

  @@map("contact")
}

model Logo {
  id    Int    @id @default(autoincrement())
  image String

  created_at DateTime  @default(now())
  updated_at DateTime?
}

model Notification {
  id         Int                @id @default(autoincrement())
  title      String
  message    String
  type       String
  data       Json?
  sent_at    DateTime           @default(now())
  created_at DateTime           @default(now())
  updated_at DateTime?
  users      NotificationUser[]

  @@map("notification")
}

model NotificationUser {
  id              Int          @id @default(autoincrement())
  notification    Notification @relation(fields: [notification_id], references: [id])
  notification_id Int
  user            User         @relation(fields: [user_id], references: [id])
  user_id         Int
  is_read         Boolean      @default(false)
  read_at         DateTime?

  @@unique([notification_id, user_id])
  @@map("notification_user")
}

model UserTestSession {
  id          Int              @id @default(autoincrement())
  user_id     Int
  category_id Int
  started_at  DateTime         @default(now())
  finished_at DateTime?
  answers     UserTestAnswer[]
  score       Int?
  percent     Float?
  total       Int?
  correct     Int?
  wrong       Int?

  user     User     @relation(fields: [user_id], references: [id])
  category Category @relation(fields: [category_id], references: [id])
}

model UserTestAnswer {
  id         Int     @id @default(autoincrement())
  session_id Int
  test_id    Int
  answer     String
  is_correct Boolean

  session UserTestSession @relation(fields: [session_id], references: [id])
  test    Test            @relation(fields: [test_id], references: [id])
}

model Region {
  id        Int        @id @default(autoincrement())
  name_uz   String
  name_ru   String
  name_en   String
  districts District[]

  created_at DateTime  @default(now())
  updated_at DateTime?

  @@map("region")
}

model District {
  id        Int    @id @default(autoincrement())
  name_uz   String
  name_ru   String
  name_en   String
  region_id Int
  region    Region @relation(fields: [region_id], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime?

  @@map("district")
}
